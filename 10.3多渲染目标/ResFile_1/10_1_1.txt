//颜色纹理
texture g_ColorTexture;
//渲染到缓冲区的纹理
texture g_RenderToTexture;
//传入时间
float g_fTime;
//世界矩阵
float4x4 g_matWorld;
//观察矩阵
float4x4 g_matView;
//投影矩阵
float4x4 g_matProject;

//世界矩阵
float4x4 g_matWorldRTT;
//观察矩阵
float4x4 g_matViewRTT;
//投影矩阵
float4x4 g_matProjectRTT;

sampler MeshTexutreSampler = sampler_state
{
    Texture = (g_ColorTexture);
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
};
sampler MeshRTTSampler = sampler_state
{
    Texture = (g_RenderToTexture);
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
};

struct VS_INPUT
{
    float4 pos: POSITION; 			//位置
    float2 TextureUV: TEXCOORD0;		//纹理坐标
};
struct VS_OUTPUT
{
    float4 Position:POSITION;			//位置
    float2 TextureUV: TEXCOORD0;		//纹理坐标
};
//默认渲染
//顶点着色器入口代码
VS_OUTPUT RenderSceneVS(VS_INPUT IN)
{
//先初始化为0
    VS_OUTPUT Out = (VS_OUTPUT) 0;
    //按正常方式渲染
    float4x4 matWorldView = mul(g_matWorld, g_matView);
    float4x4 matWorldViewProject = mul(matWorldView, g_matProject);
    Out.Position = mul(IN.Position, matWorldViewProject);
    Out.TextureUV = IN.TextureUV;
    return Out;
}

//像素着色器入口代码
float4 RenderScenePS(VS_OUTPUT In) : COLOR
{
    float4 vColor = tex2D(MeshTexutreSampler, In.TextureUV); 
    return vColor;
}
//渲染到纹理
//顶点着色器入口代码
VS_OUTPUT RenderToTextureVS(VS_INPUT IN)
{
//先初始化为0
    VS_OUTPUT Out = (VS_OUTPUT) 0;
    //按正常方式渲染
    float4x4 matWorldView = mul(g_matWorldRTT, g_matViewRTT);
    float4x4 matWorldViewProject = mul(matWorldView, g_matProjectRTT);
    Out.Position = mul(IN.Position, matWorldViewProject);
    Out.TextureUV = IN.TextureUV;
    return Out;
}

//像素着色器入口代码
float4 RenderToTexturePS(VS_OUTPUT In) : COLOR
{
    float4 vColor = tex2D(MeshTexutreSampler, In.TextureUV); 
    return vColor;
}
//使用线框渲染
float4 MainPS_Screen_Line(VS_OUTPUT In) : COLOR
{ 
    return float4(1.0,1.0,0.0,0.0);
}
technique DefaultTech
{
//正常渲染
    pass P0
     {
	
	FillMode = Solid;
	VertexShader = compile vs_2_0 RenderSceneVS();
	PixelShader = compile ps_2_0 RenderScenePS();
    }
}

technique RenderToTextureShader
{
//正常渲染
    pass P0
     {
	AlphaBlendEnable = true;
	BlendOp = Add;
	SrcBlend = SrcColor;
	DestBlend = InvSrcAlpha;
	FillMode = Solid;
	VertexShader = compile vs_2_0 RenderToTextureVS();
	PixelShader = compile ps_2_0 RenderToTexturePS();
    }
}
